#DONE - If
#DONE - While
#DONE - Else
#DONE - else if
#DONE - Indexing array[expression]
#DONE - Scopes (var managers saving predecessors)
#TODO - Actually use the scopes in if while usw
#DONE - Function definitions
#DONE - Function args (define in scope)
#DONE - Function return (Return from execute as some msg kind maybe containing DayObject)
#DONE - Improve function declaration system, either use unsafe interior mutability or create 
        functions in parser the latter is better as you can use functions before they are defined
        if we even want that but in generall multiple definition has to be allowed without 
        defining multiple times
#DONE - Closures
#DONE - Scope recording Closures

#TODO - Iterators
        They have to return DayObjects &'a DayObject doesn't really make sense
        at some point there will be references they are mut so it shouldn't 
        be the standard
#TODO - For
#TODO - Iterators in language (this might be hard)

#TODO - Change names

#TODO - Lazy variables and lazy statements

#TODO - Rust type inclusion
#TODO - Threading (thread, go, joinhandle, other joinhandle similiar to lazy(language construct), mutex, mpsc)

#TODO - References

#TODO - Modules (should std have to be imported? can it be excluded? maybe like a #no-prelude or a arg switch)
    use 'module' for importing the prelude
    maybe the std prelude is imported automatically if the --no-std flag is given it is not imported
    automatically, maybe config statements started with # that have to be the first lines in a file
    or maybe it is just not imported automatically

#TODO - Debug dropping (make sure it works and message some more in debug mode)

#TODO - Dictionaries
#TODO - Macros! functions taking Tokens instead of DayObjects
#TODO - Dict initializer macro (i wouldn't like them without, maybe as prototype without)

#TODO - Proper Errors
#TODO - Remove as much recursion as possible

#TODO - Benchmarks 
#TODO - Interactive Shell